.rn '' }`
''' $RCSfile$$Revision$$Date$
'''
''' $Log$
'''
.de Sh
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp
.if t .sp .5v
.if n .sp
..
.de Ip
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.de Vb
.ft CW
.nf
.ne \\$1
..
.de Ve
.ft R

.fi
..
'''
'''
'''     Set up \*(-- to give an unbreakable dash;
'''     string Tr holds user defined translation string.
'''     Bell System Logo is used as a dummy character.
'''
.tr \(*W-|\(bv\*(Tr
.ie n \{\
.ds -- \(*W-
.ds PI pi
.if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\" diablo 12 pitch
.ds L" ""
.ds R" ""
'''   \*(M", \*(S", \*(N" and \*(T" are the equivalent of
'''   \*(L" and \*(R", except that they are used on ".xx" lines,
'''   such as .IP and .SH, which do another additional levels of
'''   double-quote interpretation
.ds M" """
.ds S" """
.ds N" """""
.ds T" """""
.ds L' '
.ds R' '
.ds M' '
.ds S' '
.ds N' '
.ds T' '
'br\}
.el\{\
.ds -- \(em\|
.tr \*(Tr
.ds L" ``
.ds R" ''
.ds M" ``
.ds S" ''
.ds N" ``
.ds T" ''
.ds L' `
.ds R' '
.ds M' `
.ds S' '
.ds N' `
.ds T' '
.ds PI \(*p
'br\}
.\"	If the F register is turned on, we'll generate
.\"	index entries out stderr for the following things:
.\"		TH	Title 
.\"		SH	Header
.\"		Sh	Subsection 
.\"		Ip	Item
.\"		X<>	Xref  (embedded
.\"	Of course, you have to process the output yourself
.\"	in some meaninful fashion.
.if \nF \{
.de IX
.tm Index:\\$1\t\\n%\t"\\$2"
..
.nr % 0
.rr F
.\}
.TH OPENSSL_ia32cap 3 "1.0.2g" "1/Mar/2016" "OpenSSL"
.UC
.if n .hy 0
.if n .na
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.de CQ          \" put $1 in typewriter font
.ft CW
'if n "\c
'if t \\&\\$1\c
'if n \\&\\$1\c
'if n \&"
\\&\\$2 \\$3 \\$4 \\$5 \\$6 \\$7
'.ft R
..
.\" @(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2
.	\" AM - accent mark definitions
.bd B 3
.	\" fudge factors for nroff and troff
.if n \{\
.	ds #H 0
.	ds #V .8m
.	ds #F .3m
.	ds #[ \f1
.	ds #] \fP
.\}
.if t \{\
.	ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.	ds #V .6m
.	ds #F 0
.	ds #[ \&
.	ds #] \&
.\}
.	\" simple accents for nroff and troff
.if n \{\
.	ds ' \&
.	ds ` \&
.	ds ^ \&
.	ds , \&
.	ds ~ ~
.	ds ? ?
.	ds ! !
.	ds /
.	ds q
.\}
.if t \{\
.	ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.	ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.	ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.	ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.	ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.	ds ? \s-2c\h'-\w'c'u*7/10'\u\h'\*(#H'\zi\d\s+2\h'\w'c'u*8/10'
.	ds ! \s-2\(or\s+2\h'-\w'\(or'u'\v'-.8m'.\v'.8m'
.	ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.	ds q o\h'-\w'o'u*8/10'\s-4\v'.4m'\z\(*i\v'-.4m'\s+4\h'\w'o'u*8/10'
.\}
.	\" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds v \\k:\h'-(\\n(.wu*9/10-\*(#H)'\v'-\*(#V'\*(#[\s-4v\s0\v'\*(#V'\h'|\\n:u'\*(#]
.ds _ \\k:\h'-(\\n(.wu*9/10-\*(#H+(\*(#F*2/3))'\v'-.4m'\z\(hy\v'.4m'\h'|\\n:u'
.ds . \\k:\h'-(\\n(.wu*8/10)'\v'\*(#V*4/10'\z.\v'-\*(#V*4/10'\h'|\\n:u'
.ds 3 \*(#[\v'.2m'\s-2\&3\s0\v'-.2m'\*(#]
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.ds oe o\h'-(\w'o'u*4/10)'e
.ds Oe O\h'-(\w'O'u*4/10)'E
.	\" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.	\" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.	ds : e
.	ds 8 ss
.	ds v \h'-1'\o'\(aa\(ga'
.	ds _ \h'-1'^
.	ds . \h'-1'.
.	ds 3 3
.	ds o a
.	ds d- d\h'-1'\(ga
.	ds D- D\h'-1'\(hy
.	ds th \o'bp'
.	ds Th \o'LP'
.	ds ae ae
.	ds Ae AE
.	ds oe oe
.	ds Oe OE
.\}
.rm #[ #] #H #V #F C
.SH "NAME"
OPENSSL_ia32cap, OPENSSL_ia32cap_loc \- the IA\-32 processor capabilities vector
.SH "SYNOPSIS"
.PP
.Vb 2
\& unsigned int *OPENSSL_ia32cap_loc(void);
\& #define OPENSSL_ia32cap ((OPENSSL_ia32cap_loc())[0])
.Ve
.SH "DESCRIPTION"
Value returned by \fIOPENSSL_ia32cap_loc()\fR is address of a variable
containing IA\-32 processor capabilities bit vector as it appears in
EDX:ECX register pair after executing CPUID instruction with EAX=1
input value (see Intel Application Note #241618). Naturally it's
meaningful on x86 and x86_64 platforms only. The variable is normally
set up automatically upon toolkit initialization, but can be
manipulated afterwards to modify crypto library behaviour. For the
moment of this writing following bits are significant:
.Ip "bit #4 denoting presence of Time-Stamp Counter." 5
.Ip "bit #19 denoting availability of \s-1CLFLUSH\s0 instruction;" 5
.Ip "bit #20, reserved by Intel, is used to choose among \s-1RC4\s0 code paths;" 5
.Ip "bit #23 denoting \s-1MMX\s0 support;" 5
.Ip "bit #24, \s-1FXSR\s0 bit, denoting availability of \s-1XMM\s0 registers;" 5
.Ip "bit #25 denoting \s-1SSE\s0 support;" 5
.Ip "bit #26 denoting \s-1SSE2\s0 support;" 5
.Ip "bit #28 denoting Hyperthreading, which is used to distinguish cores with shared cache;" 5
.Ip "bit #30, reserved by Intel, denotes specifically Intel CPUs;" 5
.Ip "bit #33 denoting availability of \s-1PCLMULQDQ\s0 instruction;" 5
.Ip "bit #41 denoting \s-1SSSE3\s0, Supplemental \s-1SSE3\s0, support;" 5
.Ip "bit #43 denoting \s-1AMD\s0 \s-1XOP\s0 support (forced to zero on non-\s-1AMD\s0 CPUs);" 5
.Ip "bit #57 denoting \s-1AES\s0\-\s-1NI\s0 instruction set extension;" 5
.Ip "bit #59, \s-1OSXSAVE\s0 bit, denoting availability of \s-1YMM\s0 registers;" 5
.Ip "bit #60 denoting \s-1AVX\s0 extension;" 5
.Ip "bit #62 denoting availability of \s-1RDRAND\s0 instruction;" 5
.PP
For example, clearing bit #26 at run-time disables high-performance
\s-1SSE2\s0 code present in the crypto library, while clearing bit #24
disables \s-1SSE2\s0 code operating on 128-bit \s-1XMM\s0 register bank. You might
have to do the latter if target OpenSSL application is executed on \s-1SSE2\s0
capable \s-1CPU\s0, but under control of \s-1OS\s0 that does not enable \s-1XMM\s0
registers. Even though you can manipulate the value programmatically,
you most likely will find it more appropriate to set up an environment
variable with the same name prior starting target application, e.g. on
Intel P4 processor \*(L'env OPENSSL_ia32cap=0x16980010 apps/openssl\*(R', or
better yet \*(L'env OPENSSL_ia32cap=~0x1000000 apps/openssl\*(R' to achieve same
effect without modifying the application source code. Alternatively you
can reconfigure the toolkit with no-sse2 option and recompile.
.PP
Less intuitive is clearing bit #28. The truth is that it's not copied
from \s-1CPUID\s0 output verbatim, but is adjusted to reflect whether or not
the data cache is actually shared between logical cores. This in turn
affects the decision on whether or not expensive countermeasures
against cache-timing attacks are applied, most notably in \s-1AES\s0 assembler
module.
.PP
The vector is further extended with \s-1EBX\s0 value returned by \s-1CPUID\s0 with
\s-1EAX\s0=7 and \s-1ECX\s0=0 as input. Following bits are significant:
.Ip "bit #64+3 denoting availability of \s-1BMI1\s0 instructions, e.g. \s-1ANDN\s0;" 5
.Ip "bit #64+5 denoting availability of \s-1AVX2\s0 instructions;" 5
.Ip "bit #64+8 denoting availability of \s-1BMI2\s0 instructions, e.g. \s-1MUXL\s0 and \s-1RORX\s0;" 5
.Ip "bit #64+18 denoting availability of \s-1RDSEED\s0 instruction;" 5
.Ip "bit #64+19 denoting availability of \s-1ADCX\s0 and \s-1ADOX\s0 instructions;" 5

.rn }` ''
.IX Title "OPENSSL_ia32cap 3"
.IX Name "OPENSSL_ia32cap, OPENSSL_ia32cap_loc - the IA-32 processor capabilities vector"

.IX Header "NAME"

.IX Header "SYNOPSIS"

.IX Header "DESCRIPTION"

.IX Item "bit #4 denoting presence of Time-Stamp Counter."

.IX Item "bit #19 denoting availability of \s-1CLFLUSH\s0 instruction;"

.IX Item "bit #20, reserved by Intel, is used to choose among \s-1RC4\s0 code paths;"

.IX Item "bit #23 denoting \s-1MMX\s0 support;"

.IX Item "bit #24, \s-1FXSR\s0 bit, denoting availability of \s-1XMM\s0 registers;"

.IX Item "bit #25 denoting \s-1SSE\s0 support;"

.IX Item "bit #26 denoting \s-1SSE2\s0 support;"

.IX Item "bit #28 denoting Hyperthreading, which is used to distinguish cores with shared cache;"

.IX Item "bit #30, reserved by Intel, denotes specifically Intel CPUs;"

.IX Item "bit #33 denoting availability of \s-1PCLMULQDQ\s0 instruction;"

.IX Item "bit #41 denoting \s-1SSSE3\s0, Supplemental \s-1SSE3\s0, support;"

.IX Item "bit #43 denoting \s-1AMD\s0 \s-1XOP\s0 support (forced to zero on non-\s-1AMD\s0 CPUs);"

.IX Item "bit #57 denoting \s-1AES\s0\-\s-1NI\s0 instruction set extension;"

.IX Item "bit #59, \s-1OSXSAVE\s0 bit, denoting availability of \s-1YMM\s0 registers;"

.IX Item "bit #60 denoting \s-1AVX\s0 extension;"

.IX Item "bit #62 denoting availability of \s-1RDRAND\s0 instruction;"

.IX Item "bit #64+3 denoting availability of \s-1BMI1\s0 instructions, e.g. \s-1ANDN\s0;"

.IX Item "bit #64+5 denoting availability of \s-1AVX2\s0 instructions;"

.IX Item "bit #64+8 denoting availability of \s-1BMI2\s0 instructions, e.g. \s-1MUXL\s0 and \s-1RORX\s0;"

.IX Item "bit #64+18 denoting availability of \s-1RDSEED\s0 instruction;"

.IX Item "bit #64+19 denoting availability of \s-1ADCX\s0 and \s-1ADOX\s0 instructions;"

